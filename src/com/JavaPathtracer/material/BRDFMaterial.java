package com.JavaPathtracer.material;

import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

import com.JavaPathtracer.Pathtracer;
import com.JavaPathtracer.geometry.Hit;
import com.JavaPathtracer.geometry.ObjectHit;
import com.JavaPathtracer.geometry.Ray;
import com.JavaPathtracer.geometry.Sphere;
import com.JavaPathtracer.geometry.Vector;
import com.JavaPathtracer.pattern.Sampleable;
import com.JavaPathtracer.scene.Scene;
import com.JavaPathtracer.scene.WorldObject;

public abstract class BRDFMaterial extends BaseMaterial {

	public BRDFMaterial(Sampleable color) {
		super(color);
	}

	// BRDF
	public abstract double BRDF(Vector incident, Vector outgoing, Vector normal, Vector textureCoordinates);
	
	// sampler
	// TODO: use cosine weighted or even low-discrepancy sampling - both are faster to draw from AND have better distribution
	public Vector sample(Hit hit) {
		return Vector.uniformInHemisphere();
	}
	
	// PDF of the sampler (which does not necessarily draw from the BRDF - by default, do fully random sampling)
	public double samplerPDF(Hit hit) {
		return 1;
	}
	
	// "manual" MIS weight in lieu of a smarter heuristic
	public double lightSamplingWeight() {
		return 0.5;
	}
	
	// ---- mathy code incoming
	
	// generate a ray towards the light sample
	// TODO: implement solid angle sampling and destroy this hideous abomination
	public Ray generateLightSample(Hit hit, WorldObject object) {
		
		// get the sphere which surrounds the light
		Sphere bounding = object.getBoundingBox().toSphere();
		Vector towardsOrigin = bounding.center.minus(hit.point).normalize();
		
		// light sample rays are generated by picking random points on a disc centered on the light's bounding sphere and facing towards the hitpoint
		// pick random point on disc by picking a random rotation and distance from center
		double rotation = ThreadLocalRandom.current().nextDouble() * 2 * Math.PI;
		
		// generate a random vector on the disc - this step is easy since it's done in the plane of the disc
		Vector randomOnDisc = new Vector(Math.cos(rotation), 0, Math.sin(rotation)).times(ThreadLocalRandom.current().nextDouble() * bounding.radius);
		
		// transform the disc vector to world space
		Vector bvx = towardsOrigin.getOrthagonal();
		Vector bvy = towardsOrigin;
		Vector bvz = bvx.cross(bvy);
		
		// offset from the center of the disc to get the final point
		Vector worldPos = bounding.center.plus(randomOnDisc.fromCoordinateSpace(bvx, bvy, bvz));

		// return ray pointing at our final point
		return new Ray(hit.point, worldPos.minus(hit.point).normalize());
		
	}

	public Vector sampleLights(Hit hit, Scene scene, Pathtracer pathtracer, int bounces, double ior) {
		
		// for each light...
		Vector sum = new Vector();
		List<WorldObject> lights = scene.getLights();
		
		for(WorldObject light: lights) {

			// get importance-generated ray
			Sphere bounding = light.getBoundingBox().toSphere();
			Ray ray = generateLightSample(hit, light);
			
			ObjectHit lightHit = scene.traceRay(ray, light);
			
			if(lightHit != null) {
			
				// calculate solid angle
				// solid angle = 2pi(1 - cos(alpha)) where alpha = angle between disc center, edge as seen by hitpoint
				// avoid the need for an expensive arctangent
				double dist = bounding.center.minus(hit.point).length();
				double hypot = Math.sqrt(dist * dist + bounding.radius * bounding.radius);
				double solidAngle = 2 * Math.PI * (1 - dist / hypot);
				
				// area sampling means our BRDF is just (angle sampled) / (area of a unit hemisphere)
				Vector irradiance = lightHit.material.shade(lightHit, bounces + 1, scene, pathtracer, ior).times(solidAngle / (2 * Math.PI));
				
				double cosFactor = ray.direction.dot(hit.normal);
				sum = sum.plus(irradiance.times(cosFactor).times(BRDF(hit.ray.direction.reverse(), ray.direction, hit.normal, hit.textureCoord)));
			
			}
			
		}
		
		return sum;
		
	}
	
	public Vector sampleBRDF(Hit hit, Scene scene, Pathtracer pathtracer, int bounces, double ior) {
		Ray ray = new Ray(hit.point, this.sample(hit));
		double samplePDF = samplerPDF(hit);
		double brdf = BRDF(hit.ray.direction.reverse(), ray.direction, hit.normal, hit.textureCoord);
		return pathtracer.pathtraceRay(scene, ray, bounces + 1, ior).times(brdf / samplePDF * ray.direction.dot(hit.normal));
	}
	
	@Override
	public Vector shade(Hit hit, int bounces, Scene scene, Pathtracer pathtracer, double ior) {
		
		double lightSampleWeight = this.lightSamplingWeight();
		double brdfSampleWeight = 1 - lightSampleWeight; 
		
		// combine the light and brdf sample
		Vector color = this.getColor(hit.textureCoord.x, hit.textureCoord.y);
		Vector radiance = (lightSampleWeight > 0 ? this.sampleLights(hit, scene, pathtracer, bounces, ior) : Vector.ZERO).times(lightSampleWeight).plus(brdfSampleWeight > 0 ? this.sampleBRDF(hit, scene, pathtracer, bounces, ior) : Vector.ZERO);

		return radiance.times(color);
		
	}
	
}